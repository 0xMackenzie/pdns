#!/usr/bin/env python
#
# Shell-script style.

import os
import subprocess
import sys
import tempfile

SQLITE_DB = 'pdns.sqlite3'
WEBPORT = '5556'
WEBPASSWORD = '12345'

NAMED_CONF_TPL = """
# Generated by runtests.py
options { directory "../regression-tests/zones/"; };
zone "example.com" { type master; file "example.com"; };
"""

# Prepare sqlite DB with a single zone.
subprocess.check_call(["rm", "-f", SQLITE_DB])
subprocess.check_call(["make", "-C", "../pdns", "zone2sql"])

with open('../modules/gsqlite3backend/no-dnssec.schema.sqlite3.sql', 'r') as schema_file:
    subprocess.check_call(["sqlite3", SQLITE_DB], stdin=schema_file)
with open('../modules/gsqlite3backend/dnssec.schema.sqlite3.sql', 'r') as schema_file:
    subprocess.check_call(["sqlite3", SQLITE_DB], stdin=schema_file)

with open('named.conf', 'w') as named_conf:
    named_conf.write(NAMED_CONF_TPL)
with tempfile.TemporaryFile() as tf:
    p = subprocess.Popen(["../pdns/zone2sql", "--transactions", "--gsqlite", "--named-conf=named.conf"], stdout=tf)
    p.communicate()
    if p.returncode != 0:
        raise Exception("zone2sql failed")
    tf.seek(0, os.SEEK_SET)  # rewind
    subprocess.check_call(["sqlite3", SQLITE_DB], stdin=tf)


# Now run pdns and the tests.
print "Launching pdns_server and running tests..."
pdnsargs = ("--daemon=no --local-port=5300 --socket-dir=./ --no-shuffle --launch=gsqlite3 --gsqlite3-dnssec --send-root-referral --allow-2136-from=127.0.0.0/8 --experimental-rfc2136=yes --cache-ttl=0 --no-config --gsqlite3-database="+SQLITE_DB+" --experimental-json-interface=yes --webserver=yes --webserver-port="+WEBPORT+" --webserver-address=127.0.0.1 --query-logging  --webserver-password="+WEBPASSWORD).split()
pdns = subprocess.Popen(["../pdns/pdns_server"] + pdnsargs, close_fds=True)

rc = 0
test_env = {}
test_env.update(os.environ)
test_env.update({'WEBPORT': WEBPORT, 'WEBPASSWORD': WEBPASSWORD})

try:
    print ""
    p = subprocess.check_call(["nosetests", "--with-xunit"], env=test_env)
except subprocess.CalledProcessError as ex:
    rc = ex.returncode
finally:
    pdns.terminate()
    pdns.wait()

sys.exit(rc)
