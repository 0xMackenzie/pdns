#!/usr/bin/env python
import unittest
import os
import subprocess

class TestCheckConfig(unittest.TestCase):

    def tryDNSDist(self, configTemplate, shouldBeSuccessful = True):
        conffile = 'dnsdist_test.conf'
        with open(conffile, 'w') as conf:
            conf.write("-- Autogenerated by dnsdisttests.py\n")
            conf.write(configTemplate)

        dnsdistcmd = [os.environ['DNSDISTBIN'], '-C', conffile, '--check-config']

        with open(os.devnull, 'w') as fdDevNull:
            dnsdist = subprocess.Popen(dnsdistcmd, close_fds=True, stdout=fdDevNull)

        if dnsdist.poll() is not None:
            if dnsdist.returncode != 0 and not shouldBeSuccessful:
                sys.exit(1)
            sys.exit(0)

    def testWorkingConfig(self):
        configTemplate = """
            newServer{address="127.0.0.1:53"}
            truncateTC(true)
            addAnyTCRule()
            addAction(RegexRule("evil[0-9]{4,}\\\\.regex\\\\.tests\\\\.powerdns\\\\.com$"), RCodeAction(5))
            mySMN = newSuffixMatchNode()
            mySMN:add(newDNSName("nameAndQtype.tests.powerdns.com."))
            addAction(AndRule{SuffixMatchNodeRule(mySMN), QTypeRule("TXT")}, RCodeAction(4))
            addAction(makeRule("drop.test.powerdns.com."), DropAction())
            block=newDNSName("powerdns.org.")
            function blockFilter(dq)
                if(dq.qname:isPartOf(block))
                then
                    print("Blocking *.powerdns.org")
                    return true
                end
                return false
            end
        """

        self.tryDNSDist(configTemplate)

    def testEmptyConfig(self):
        configTemplate = ""
        self.tryDNSDist(configTemplate)

    def testInvalidFunction(self):
        configTemplate = """
          oldServer { address="127.0.0.1:55" }
        """
        self.tryDNSDist(configTemplate, False)

    def testInvalidParam(self):
        configTemplate = """
          newServer { address="127.0.0.355" }
        """
        self.tryDNSDist(configTemplate, False)

    def testSyntaxError(self):
        configTemplate = "blablabla"
        self.tryDNSDist(configTemplate, False)
