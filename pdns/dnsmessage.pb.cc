// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdns/dnsmessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dnsmessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PBDNSMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDNSMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDNSMessage_DNSQuestion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDNSMessage_DNSQuestion_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDNSMessage_DNSResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDNSMessage_DNSResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDNSMessage_DNSResponse_DNSRR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDNSMessage_DNSResponse_DNSRR_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PBDNSMessage_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PBDNSMessage_SocketFamily_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PBDNSMessage_SocketProtocol_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pdns_2fdnsmessage_2eproto() {
  protobuf_AddDesc_pdns_2fdnsmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pdns/dnsmessage.proto");
  GOOGLE_CHECK(file != NULL);
  PBDNSMessage_descriptor_ = file->message_type(0);
  static const int PBDNSMessage_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage, serveridentity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage, socketfamily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage, socketprotocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage, inbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage, timesec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage, timeusec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage, question_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage, response_),
  };
  PBDNSMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDNSMessage_descriptor_,
      PBDNSMessage::default_instance_,
      PBDNSMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDNSMessage));
  PBDNSMessage_DNSQuestion_descriptor_ = PBDNSMessage_descriptor_->nested_type(0);
  static const int PBDNSMessage_DNSQuestion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage_DNSQuestion, qname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage_DNSQuestion, qtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage_DNSQuestion, qclass_),
  };
  PBDNSMessage_DNSQuestion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDNSMessage_DNSQuestion_descriptor_,
      PBDNSMessage_DNSQuestion::default_instance_,
      PBDNSMessage_DNSQuestion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage_DNSQuestion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage_DNSQuestion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDNSMessage_DNSQuestion));
  PBDNSMessage_DNSResponse_descriptor_ = PBDNSMessage_descriptor_->nested_type(1);
  static const int PBDNSMessage_DNSResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage_DNSResponse, rcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage_DNSResponse, rrs_),
  };
  PBDNSMessage_DNSResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDNSMessage_DNSResponse_descriptor_,
      PBDNSMessage_DNSResponse::default_instance_,
      PBDNSMessage_DNSResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage_DNSResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage_DNSResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDNSMessage_DNSResponse));
  PBDNSMessage_DNSResponse_DNSRR_descriptor_ = PBDNSMessage_DNSResponse_descriptor_->nested_type(0);
  static const int PBDNSMessage_DNSResponse_DNSRR_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage_DNSResponse_DNSRR, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage_DNSResponse_DNSRR, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage_DNSResponse_DNSRR, class__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage_DNSResponse_DNSRR, ttl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage_DNSResponse_DNSRR, rdata_),
  };
  PBDNSMessage_DNSResponse_DNSRR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDNSMessage_DNSResponse_DNSRR_descriptor_,
      PBDNSMessage_DNSResponse_DNSRR::default_instance_,
      PBDNSMessage_DNSResponse_DNSRR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage_DNSResponse_DNSRR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDNSMessage_DNSResponse_DNSRR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDNSMessage_DNSResponse_DNSRR));
  PBDNSMessage_Type_descriptor_ = PBDNSMessage_descriptor_->enum_type(0);
  PBDNSMessage_SocketFamily_descriptor_ = PBDNSMessage_descriptor_->enum_type(1);
  PBDNSMessage_SocketProtocol_descriptor_ = PBDNSMessage_descriptor_->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pdns_2fdnsmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDNSMessage_descriptor_, &PBDNSMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDNSMessage_DNSQuestion_descriptor_, &PBDNSMessage_DNSQuestion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDNSMessage_DNSResponse_descriptor_, &PBDNSMessage_DNSResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDNSMessage_DNSResponse_DNSRR_descriptor_, &PBDNSMessage_DNSResponse_DNSRR::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pdns_2fdnsmessage_2eproto() {
  delete PBDNSMessage::default_instance_;
  delete PBDNSMessage_reflection_;
  delete PBDNSMessage_DNSQuestion::default_instance_;
  delete PBDNSMessage_DNSQuestion_reflection_;
  delete PBDNSMessage_DNSResponse::default_instance_;
  delete PBDNSMessage_DNSResponse_reflection_;
  delete PBDNSMessage_DNSResponse_DNSRR::default_instance_;
  delete PBDNSMessage_DNSResponse_DNSRR_reflection_;
}

void protobuf_AddDesc_pdns_2fdnsmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025pdns/dnsmessage.proto\"\311\005\n\014PBDNSMessage"
    "\022 \n\004type\030\001 \002(\0162\022.PBDNSMessage.Type\022\021\n\tme"
    "ssageId\030\002 \001(\014\022\026\n\016serverIdentity\030\003 \001(\014\0220\n"
    "\014socketFamily\030\004 \001(\0162\032.PBDNSMessage.Socke"
    "tFamily\0224\n\016socketProtocol\030\005 \001(\0162\034.PBDNSM"
    "essage.SocketProtocol\022\014\n\004from\030\006 \001(\014\022\n\n\002t"
    "o\030\007 \001(\014\022\017\n\007inBytes\030\010 \001(\004\022\017\n\007timeSec\030\t \001("
    "\r\022\020\n\010timeUsec\030\n \001(\r\022\n\n\002id\030\013 \001(\r\022+\n\010quest"
    "ion\030\014 \001(\0132\031.PBDNSMessage.DNSQuestion\022+\n\010"
    "response\030\r \001(\0132\031.PBDNSMessage.DNSRespons"
    "e\032;\n\013DNSQuestion\022\r\n\005qName\030\001 \001(\t\022\r\n\005qType"
    "\030\002 \001(\r\022\016\n\006qClass\030\003 \001(\r\032\232\001\n\013DNSResponse\022\r"
    "\n\005rcode\030\001 \001(\r\022,\n\003rrs\030\002 \003(\0132\037.PBDNSMessag"
    "e.DNSResponse.DNSRR\032N\n\005DNSRR\022\014\n\004name\030\001 \001"
    "(\t\022\014\n\004type\030\002 \001(\r\022\r\n\005class\030\003 \001(\r\022\013\n\003ttl\030\004"
    " \001(\r\022\r\n\005rdata\030\005 \001(\014\"-\n\004Type\022\020\n\014DNSQueryT"
    "ype\020\001\022\023\n\017DNSResponseType\020\002\"#\n\014SocketFami"
    "ly\022\010\n\004INET\020\001\022\t\n\005INET6\020\002\"\"\n\016SocketProtoco"
    "l\022\007\n\003UDP\020\001\022\007\n\003TCP\020\002", 739);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pdns/dnsmessage.proto", &protobuf_RegisterTypes);
  PBDNSMessage::default_instance_ = new PBDNSMessage();
  PBDNSMessage_DNSQuestion::default_instance_ = new PBDNSMessage_DNSQuestion();
  PBDNSMessage_DNSResponse::default_instance_ = new PBDNSMessage_DNSResponse();
  PBDNSMessage_DNSResponse_DNSRR::default_instance_ = new PBDNSMessage_DNSResponse_DNSRR();
  PBDNSMessage::default_instance_->InitAsDefaultInstance();
  PBDNSMessage_DNSQuestion::default_instance_->InitAsDefaultInstance();
  PBDNSMessage_DNSResponse::default_instance_->InitAsDefaultInstance();
  PBDNSMessage_DNSResponse_DNSRR::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pdns_2fdnsmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pdns_2fdnsmessage_2eproto {
  StaticDescriptorInitializer_pdns_2fdnsmessage_2eproto() {
    protobuf_AddDesc_pdns_2fdnsmessage_2eproto();
  }
} static_descriptor_initializer_pdns_2fdnsmessage_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* PBDNSMessage_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDNSMessage_Type_descriptor_;
}
bool PBDNSMessage_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PBDNSMessage_Type PBDNSMessage::DNSQueryType;
const PBDNSMessage_Type PBDNSMessage::DNSResponseType;
const PBDNSMessage_Type PBDNSMessage::Type_MIN;
const PBDNSMessage_Type PBDNSMessage::Type_MAX;
const int PBDNSMessage::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* PBDNSMessage_SocketFamily_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDNSMessage_SocketFamily_descriptor_;
}
bool PBDNSMessage_SocketFamily_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PBDNSMessage_SocketFamily PBDNSMessage::INET;
const PBDNSMessage_SocketFamily PBDNSMessage::INET6;
const PBDNSMessage_SocketFamily PBDNSMessage::SocketFamily_MIN;
const PBDNSMessage_SocketFamily PBDNSMessage::SocketFamily_MAX;
const int PBDNSMessage::SocketFamily_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* PBDNSMessage_SocketProtocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDNSMessage_SocketProtocol_descriptor_;
}
bool PBDNSMessage_SocketProtocol_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PBDNSMessage_SocketProtocol PBDNSMessage::UDP;
const PBDNSMessage_SocketProtocol PBDNSMessage::TCP;
const PBDNSMessage_SocketProtocol PBDNSMessage::SocketProtocol_MIN;
const PBDNSMessage_SocketProtocol PBDNSMessage::SocketProtocol_MAX;
const int PBDNSMessage::SocketProtocol_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PBDNSMessage_DNSQuestion::kQNameFieldNumber;
const int PBDNSMessage_DNSQuestion::kQTypeFieldNumber;
const int PBDNSMessage_DNSQuestion::kQClassFieldNumber;
#endif  // !_MSC_VER

PBDNSMessage_DNSQuestion::PBDNSMessage_DNSQuestion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBDNSMessage.DNSQuestion)
}

void PBDNSMessage_DNSQuestion::InitAsDefaultInstance() {
}

PBDNSMessage_DNSQuestion::PBDNSMessage_DNSQuestion(const PBDNSMessage_DNSQuestion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBDNSMessage.DNSQuestion)
}

void PBDNSMessage_DNSQuestion::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  qname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qtype_ = 0u;
  qclass_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDNSMessage_DNSQuestion::~PBDNSMessage_DNSQuestion() {
  // @@protoc_insertion_point(destructor:PBDNSMessage.DNSQuestion)
  SharedDtor();
}

void PBDNSMessage_DNSQuestion::SharedDtor() {
  if (qname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qname_;
  }
  if (this != default_instance_) {
  }
}

void PBDNSMessage_DNSQuestion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDNSMessage_DNSQuestion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDNSMessage_DNSQuestion_descriptor_;
}

const PBDNSMessage_DNSQuestion& PBDNSMessage_DNSQuestion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdns_2fdnsmessage_2eproto();
  return *default_instance_;
}

PBDNSMessage_DNSQuestion* PBDNSMessage_DNSQuestion::default_instance_ = NULL;

PBDNSMessage_DNSQuestion* PBDNSMessage_DNSQuestion::New() const {
  return new PBDNSMessage_DNSQuestion;
}

void PBDNSMessage_DNSQuestion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PBDNSMessage_DNSQuestion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(qtype_, qclass_);
    if (has_qname()) {
      if (qname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        qname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDNSMessage_DNSQuestion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBDNSMessage.DNSQuestion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string qName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qname().data(), this->qname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_qType;
        break;
      }

      // optional uint32 qType = 2;
      case 2: {
        if (tag == 16) {
         parse_qType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qtype_)));
          set_has_qtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_qClass;
        break;
      }

      // optional uint32 qClass = 3;
      case 3: {
        if (tag == 24) {
         parse_qClass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qclass_)));
          set_has_qclass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBDNSMessage.DNSQuestion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBDNSMessage.DNSQuestion)
  return false;
#undef DO_
}

void PBDNSMessage_DNSQuestion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBDNSMessage.DNSQuestion)
  // optional string qName = 1;
  if (has_qname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qname().data(), this->qname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->qname(), output);
  }

  // optional uint32 qType = 2;
  if (has_qtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->qtype(), output);
  }

  // optional uint32 qClass = 3;
  if (has_qclass()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->qclass(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBDNSMessage.DNSQuestion)
}

::google::protobuf::uint8* PBDNSMessage_DNSQuestion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBDNSMessage.DNSQuestion)
  // optional string qName = 1;
  if (has_qname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qname().data(), this->qname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->qname(), target);
  }

  // optional uint32 qType = 2;
  if (has_qtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->qtype(), target);
  }

  // optional uint32 qClass = 3;
  if (has_qclass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->qclass(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBDNSMessage.DNSQuestion)
  return target;
}

int PBDNSMessage_DNSQuestion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string qName = 1;
    if (has_qname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qname());
    }

    // optional uint32 qType = 2;
    if (has_qtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qtype());
    }

    // optional uint32 qClass = 3;
    if (has_qclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qclass());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDNSMessage_DNSQuestion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDNSMessage_DNSQuestion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDNSMessage_DNSQuestion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDNSMessage_DNSQuestion::MergeFrom(const PBDNSMessage_DNSQuestion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qname()) {
      set_qname(from.qname());
    }
    if (from.has_qtype()) {
      set_qtype(from.qtype());
    }
    if (from.has_qclass()) {
      set_qclass(from.qclass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDNSMessage_DNSQuestion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDNSMessage_DNSQuestion::CopyFrom(const PBDNSMessage_DNSQuestion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDNSMessage_DNSQuestion::IsInitialized() const {

  return true;
}

void PBDNSMessage_DNSQuestion::Swap(PBDNSMessage_DNSQuestion* other) {
  if (other != this) {
    std::swap(qname_, other->qname_);
    std::swap(qtype_, other->qtype_);
    std::swap(qclass_, other->qclass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDNSMessage_DNSQuestion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDNSMessage_DNSQuestion_descriptor_;
  metadata.reflection = PBDNSMessage_DNSQuestion_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PBDNSMessage_DNSResponse_DNSRR::kNameFieldNumber;
const int PBDNSMessage_DNSResponse_DNSRR::kTypeFieldNumber;
const int PBDNSMessage_DNSResponse_DNSRR::kClassFieldNumber;
const int PBDNSMessage_DNSResponse_DNSRR::kTtlFieldNumber;
const int PBDNSMessage_DNSResponse_DNSRR::kRdataFieldNumber;
#endif  // !_MSC_VER

PBDNSMessage_DNSResponse_DNSRR::PBDNSMessage_DNSResponse_DNSRR()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBDNSMessage.DNSResponse.DNSRR)
}

void PBDNSMessage_DNSResponse_DNSRR::InitAsDefaultInstance() {
}

PBDNSMessage_DNSResponse_DNSRR::PBDNSMessage_DNSResponse_DNSRR(const PBDNSMessage_DNSResponse_DNSRR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBDNSMessage.DNSResponse.DNSRR)
}

void PBDNSMessage_DNSResponse_DNSRR::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  class__ = 0u;
  ttl_ = 0u;
  rdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDNSMessage_DNSResponse_DNSRR::~PBDNSMessage_DNSResponse_DNSRR() {
  // @@protoc_insertion_point(destructor:PBDNSMessage.DNSResponse.DNSRR)
  SharedDtor();
}

void PBDNSMessage_DNSResponse_DNSRR::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (rdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rdata_;
  }
  if (this != default_instance_) {
  }
}

void PBDNSMessage_DNSResponse_DNSRR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDNSMessage_DNSResponse_DNSRR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDNSMessage_DNSResponse_DNSRR_descriptor_;
}

const PBDNSMessage_DNSResponse_DNSRR& PBDNSMessage_DNSResponse_DNSRR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdns_2fdnsmessage_2eproto();
  return *default_instance_;
}

PBDNSMessage_DNSResponse_DNSRR* PBDNSMessage_DNSResponse_DNSRR::default_instance_ = NULL;

PBDNSMessage_DNSResponse_DNSRR* PBDNSMessage_DNSResponse_DNSRR::New() const {
  return new PBDNSMessage_DNSResponse_DNSRR;
}

void PBDNSMessage_DNSResponse_DNSRR::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PBDNSMessage_DNSResponse_DNSRR*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(type_, class__);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    ttl_ = 0u;
    if (has_rdata()) {
      if (rdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rdata_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDNSMessage_DNSResponse_DNSRR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBDNSMessage.DNSResponse.DNSRR)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_class;
        break;
      }

      // optional uint32 class = 3;
      case 3: {
        if (tag == 24) {
         parse_class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class__)));
          set_has_class_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ttl;
        break;
      }

      // optional uint32 ttl = 4;
      case 4: {
        if (tag == 32) {
         parse_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ttl_)));
          set_has_ttl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rdata;
        break;
      }

      // optional bytes rdata = 5;
      case 5: {
        if (tag == 42) {
         parse_rdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBDNSMessage.DNSResponse.DNSRR)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBDNSMessage.DNSResponse.DNSRR)
  return false;
#undef DO_
}

void PBDNSMessage_DNSResponse_DNSRR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBDNSMessage.DNSResponse.DNSRR)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 class = 3;
  if (has_class_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->class_(), output);
  }

  // optional uint32 ttl = 4;
  if (has_ttl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ttl(), output);
  }

  // optional bytes rdata = 5;
  if (has_rdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->rdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBDNSMessage.DNSResponse.DNSRR)
}

::google::protobuf::uint8* PBDNSMessage_DNSResponse_DNSRR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBDNSMessage.DNSResponse.DNSRR)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 class = 3;
  if (has_class_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->class_(), target);
  }

  // optional uint32 ttl = 4;
  if (has_ttl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ttl(), target);
  }

  // optional bytes rdata = 5;
  if (has_rdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->rdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBDNSMessage.DNSResponse.DNSRR)
  return target;
}

int PBDNSMessage_DNSResponse_DNSRR::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 class = 3;
    if (has_class_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->class_());
    }

    // optional uint32 ttl = 4;
    if (has_ttl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ttl());
    }

    // optional bytes rdata = 5;
    if (has_rdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDNSMessage_DNSResponse_DNSRR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDNSMessage_DNSResponse_DNSRR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDNSMessage_DNSResponse_DNSRR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDNSMessage_DNSResponse_DNSRR::MergeFrom(const PBDNSMessage_DNSResponse_DNSRR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_class_()) {
      set_class_(from.class_());
    }
    if (from.has_ttl()) {
      set_ttl(from.ttl());
    }
    if (from.has_rdata()) {
      set_rdata(from.rdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDNSMessage_DNSResponse_DNSRR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDNSMessage_DNSResponse_DNSRR::CopyFrom(const PBDNSMessage_DNSResponse_DNSRR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDNSMessage_DNSResponse_DNSRR::IsInitialized() const {

  return true;
}

void PBDNSMessage_DNSResponse_DNSRR::Swap(PBDNSMessage_DNSResponse_DNSRR* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(class__, other->class__);
    std::swap(ttl_, other->ttl_);
    std::swap(rdata_, other->rdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDNSMessage_DNSResponse_DNSRR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDNSMessage_DNSResponse_DNSRR_descriptor_;
  metadata.reflection = PBDNSMessage_DNSResponse_DNSRR_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PBDNSMessage_DNSResponse::kRcodeFieldNumber;
const int PBDNSMessage_DNSResponse::kRrsFieldNumber;
#endif  // !_MSC_VER

PBDNSMessage_DNSResponse::PBDNSMessage_DNSResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBDNSMessage.DNSResponse)
}

void PBDNSMessage_DNSResponse::InitAsDefaultInstance() {
}

PBDNSMessage_DNSResponse::PBDNSMessage_DNSResponse(const PBDNSMessage_DNSResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBDNSMessage.DNSResponse)
}

void PBDNSMessage_DNSResponse::SharedCtor() {
  _cached_size_ = 0;
  rcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDNSMessage_DNSResponse::~PBDNSMessage_DNSResponse() {
  // @@protoc_insertion_point(destructor:PBDNSMessage.DNSResponse)
  SharedDtor();
}

void PBDNSMessage_DNSResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBDNSMessage_DNSResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDNSMessage_DNSResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDNSMessage_DNSResponse_descriptor_;
}

const PBDNSMessage_DNSResponse& PBDNSMessage_DNSResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdns_2fdnsmessage_2eproto();
  return *default_instance_;
}

PBDNSMessage_DNSResponse* PBDNSMessage_DNSResponse::default_instance_ = NULL;

PBDNSMessage_DNSResponse* PBDNSMessage_DNSResponse::New() const {
  return new PBDNSMessage_DNSResponse;
}

void PBDNSMessage_DNSResponse::Clear() {
  rcode_ = 0u;
  rrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDNSMessage_DNSResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBDNSMessage.DNSResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rcode_)));
          set_has_rcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rrs;
        break;
      }

      // repeated .PBDNSMessage.DNSResponse.DNSRR rrs = 2;
      case 2: {
        if (tag == 18) {
         parse_rrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rrs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBDNSMessage.DNSResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBDNSMessage.DNSResponse)
  return false;
#undef DO_
}

void PBDNSMessage_DNSResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBDNSMessage.DNSResponse)
  // optional uint32 rcode = 1;
  if (has_rcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rcode(), output);
  }

  // repeated .PBDNSMessage.DNSResponse.DNSRR rrs = 2;
  for (int i = 0; i < this->rrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBDNSMessage.DNSResponse)
}

::google::protobuf::uint8* PBDNSMessage_DNSResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBDNSMessage.DNSResponse)
  // optional uint32 rcode = 1;
  if (has_rcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rcode(), target);
  }

  // repeated .PBDNSMessage.DNSResponse.DNSRR rrs = 2;
  for (int i = 0; i < this->rrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBDNSMessage.DNSResponse)
  return target;
}

int PBDNSMessage_DNSResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rcode = 1;
    if (has_rcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rcode());
    }

  }
  // repeated .PBDNSMessage.DNSResponse.DNSRR rrs = 2;
  total_size += 1 * this->rrs_size();
  for (int i = 0; i < this->rrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDNSMessage_DNSResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDNSMessage_DNSResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDNSMessage_DNSResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDNSMessage_DNSResponse::MergeFrom(const PBDNSMessage_DNSResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  rrs_.MergeFrom(from.rrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rcode()) {
      set_rcode(from.rcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDNSMessage_DNSResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDNSMessage_DNSResponse::CopyFrom(const PBDNSMessage_DNSResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDNSMessage_DNSResponse::IsInitialized() const {

  return true;
}

void PBDNSMessage_DNSResponse::Swap(PBDNSMessage_DNSResponse* other) {
  if (other != this) {
    std::swap(rcode_, other->rcode_);
    rrs_.Swap(&other->rrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDNSMessage_DNSResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDNSMessage_DNSResponse_descriptor_;
  metadata.reflection = PBDNSMessage_DNSResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PBDNSMessage::kTypeFieldNumber;
const int PBDNSMessage::kMessageIdFieldNumber;
const int PBDNSMessage::kServerIdentityFieldNumber;
const int PBDNSMessage::kSocketFamilyFieldNumber;
const int PBDNSMessage::kSocketProtocolFieldNumber;
const int PBDNSMessage::kFromFieldNumber;
const int PBDNSMessage::kToFieldNumber;
const int PBDNSMessage::kInBytesFieldNumber;
const int PBDNSMessage::kTimeSecFieldNumber;
const int PBDNSMessage::kTimeUsecFieldNumber;
const int PBDNSMessage::kIdFieldNumber;
const int PBDNSMessage::kQuestionFieldNumber;
const int PBDNSMessage::kResponseFieldNumber;
#endif  // !_MSC_VER

PBDNSMessage::PBDNSMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBDNSMessage)
}

void PBDNSMessage::InitAsDefaultInstance() {
  question_ = const_cast< ::PBDNSMessage_DNSQuestion*>(&::PBDNSMessage_DNSQuestion::default_instance());
  response_ = const_cast< ::PBDNSMessage_DNSResponse*>(&::PBDNSMessage_DNSResponse::default_instance());
}

PBDNSMessage::PBDNSMessage(const PBDNSMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PBDNSMessage)
}

void PBDNSMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serveridentity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socketfamily_ = 1;
  socketprotocol_ = 1;
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inbytes_ = GOOGLE_ULONGLONG(0);
  timesec_ = 0u;
  timeusec_ = 0u;
  id_ = 0u;
  question_ = NULL;
  response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDNSMessage::~PBDNSMessage() {
  // @@protoc_insertion_point(destructor:PBDNSMessage)
  SharedDtor();
}

void PBDNSMessage::SharedDtor() {
  if (messageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messageid_;
  }
  if (serveridentity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serveridentity_;
  }
  if (from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_;
  }
  if (to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_;
  }
  if (this != default_instance_) {
    delete question_;
    delete response_;
  }
}

void PBDNSMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDNSMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDNSMessage_descriptor_;
}

const PBDNSMessage& PBDNSMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pdns_2fdnsmessage_2eproto();
  return *default_instance_;
}

PBDNSMessage* PBDNSMessage::default_instance_ = NULL;

PBDNSMessage* PBDNSMessage::New() const {
  return new PBDNSMessage;
}

void PBDNSMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PBDNSMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    type_ = 1;
    if (has_messageid()) {
      if (messageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        messageid_->clear();
      }
    }
    if (has_serveridentity()) {
      if (serveridentity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serveridentity_->clear();
      }
    }
    socketfamily_ = 1;
    socketprotocol_ = 1;
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        from_->clear();
      }
    }
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        to_->clear();
      }
    }
    inbytes_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(timeusec_, id_);
    timesec_ = 0u;
    if (has_question()) {
      if (question_ != NULL) question_->::PBDNSMessage_DNSQuestion::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::PBDNSMessage_DNSResponse::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDNSMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBDNSMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PBDNSMessage.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBDNSMessage_Type_IsValid(value)) {
            set_type(static_cast< ::PBDNSMessage_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_messageId;
        break;
      }

      // optional bytes messageId = 2;
      case 2: {
        if (tag == 18) {
         parse_messageId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_messageid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_serverIdentity;
        break;
      }

      // optional bytes serverIdentity = 3;
      case 3: {
        if (tag == 26) {
         parse_serverIdentity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serveridentity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_socketFamily;
        break;
      }

      // optional .PBDNSMessage.SocketFamily socketFamily = 4;
      case 4: {
        if (tag == 32) {
         parse_socketFamily:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBDNSMessage_SocketFamily_IsValid(value)) {
            set_socketfamily(static_cast< ::PBDNSMessage_SocketFamily >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_socketProtocol;
        break;
      }

      // optional .PBDNSMessage.SocketProtocol socketProtocol = 5;
      case 5: {
        if (tag == 40) {
         parse_socketProtocol:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PBDNSMessage_SocketProtocol_IsValid(value)) {
            set_socketprotocol(static_cast< ::PBDNSMessage_SocketProtocol >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_from;
        break;
      }

      // optional bytes from = 6;
      case 6: {
        if (tag == 50) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_to;
        break;
      }

      // optional bytes to = 7;
      case 7: {
        if (tag == 58) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_inBytes;
        break;
      }

      // optional uint64 inBytes = 8;
      case 8: {
        if (tag == 64) {
         parse_inBytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inbytes_)));
          set_has_inbytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeSec;
        break;
      }

      // optional uint32 timeSec = 9;
      case 9: {
        if (tag == 72) {
         parse_timeSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timesec_)));
          set_has_timesec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_timeUsec;
        break;
      }

      // optional uint32 timeUsec = 10;
      case 10: {
        if (tag == 80) {
         parse_timeUsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeusec_)));
          set_has_timeusec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_id;
        break;
      }

      // optional uint32 id = 11;
      case 11: {
        if (tag == 88) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_question;
        break;
      }

      // optional .PBDNSMessage.DNSQuestion question = 12;
      case 12: {
        if (tag == 98) {
         parse_question:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_question()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_response;
        break;
      }

      // optional .PBDNSMessage.DNSResponse response = 13;
      case 13: {
        if (tag == 106) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBDNSMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBDNSMessage)
  return false;
#undef DO_
}

void PBDNSMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBDNSMessage)
  // required .PBDNSMessage.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bytes messageId = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->messageid(), output);
  }

  // optional bytes serverIdentity = 3;
  if (has_serveridentity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->serveridentity(), output);
  }

  // optional .PBDNSMessage.SocketFamily socketFamily = 4;
  if (has_socketfamily()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->socketfamily(), output);
  }

  // optional .PBDNSMessage.SocketProtocol socketProtocol = 5;
  if (has_socketprotocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->socketprotocol(), output);
  }

  // optional bytes from = 6;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->from(), output);
  }

  // optional bytes to = 7;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->to(), output);
  }

  // optional uint64 inBytes = 8;
  if (has_inbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->inbytes(), output);
  }

  // optional uint32 timeSec = 9;
  if (has_timesec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timesec(), output);
  }

  // optional uint32 timeUsec = 10;
  if (has_timeusec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->timeusec(), output);
  }

  // optional uint32 id = 11;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->id(), output);
  }

  // optional .PBDNSMessage.DNSQuestion question = 12;
  if (has_question()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->question(), output);
  }

  // optional .PBDNSMessage.DNSResponse response = 13;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PBDNSMessage)
}

::google::protobuf::uint8* PBDNSMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBDNSMessage)
  // required .PBDNSMessage.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bytes messageId = 2;
  if (has_messageid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->messageid(), target);
  }

  // optional bytes serverIdentity = 3;
  if (has_serveridentity()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->serveridentity(), target);
  }

  // optional .PBDNSMessage.SocketFamily socketFamily = 4;
  if (has_socketfamily()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->socketfamily(), target);
  }

  // optional .PBDNSMessage.SocketProtocol socketProtocol = 5;
  if (has_socketprotocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->socketprotocol(), target);
  }

  // optional bytes from = 6;
  if (has_from()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->from(), target);
  }

  // optional bytes to = 7;
  if (has_to()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->to(), target);
  }

  // optional uint64 inBytes = 8;
  if (has_inbytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->inbytes(), target);
  }

  // optional uint32 timeSec = 9;
  if (has_timesec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timesec(), target);
  }

  // optional uint32 timeUsec = 10;
  if (has_timeusec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->timeusec(), target);
  }

  // optional uint32 id = 11;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->id(), target);
  }

  // optional .PBDNSMessage.DNSQuestion question = 12;
  if (has_question()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->question(), target);
  }

  // optional .PBDNSMessage.DNSResponse response = 13;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PBDNSMessage)
  return target;
}

int PBDNSMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PBDNSMessage.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes messageId = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->messageid());
    }

    // optional bytes serverIdentity = 3;
    if (has_serveridentity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serveridentity());
    }

    // optional .PBDNSMessage.SocketFamily socketFamily = 4;
    if (has_socketfamily()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->socketfamily());
    }

    // optional .PBDNSMessage.SocketProtocol socketProtocol = 5;
    if (has_socketprotocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->socketprotocol());
    }

    // optional bytes from = 6;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->from());
    }

    // optional bytes to = 7;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->to());
    }

    // optional uint64 inBytes = 8;
    if (has_inbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inbytes());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 timeSec = 9;
    if (has_timesec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timesec());
    }

    // optional uint32 timeUsec = 10;
    if (has_timeusec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeusec());
    }

    // optional uint32 id = 11;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .PBDNSMessage.DNSQuestion question = 12;
    if (has_question()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->question());
    }

    // optional .PBDNSMessage.DNSResponse response = 13;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDNSMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDNSMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDNSMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDNSMessage::MergeFrom(const PBDNSMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_serveridentity()) {
      set_serveridentity(from.serveridentity());
    }
    if (from.has_socketfamily()) {
      set_socketfamily(from.socketfamily());
    }
    if (from.has_socketprotocol()) {
      set_socketprotocol(from.socketprotocol());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_inbytes()) {
      set_inbytes(from.inbytes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_timesec()) {
      set_timesec(from.timesec());
    }
    if (from.has_timeusec()) {
      set_timeusec(from.timeusec());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_question()) {
      mutable_question()->::PBDNSMessage_DNSQuestion::MergeFrom(from.question());
    }
    if (from.has_response()) {
      mutable_response()->::PBDNSMessage_DNSResponse::MergeFrom(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDNSMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDNSMessage::CopyFrom(const PBDNSMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDNSMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PBDNSMessage::Swap(PBDNSMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(messageid_, other->messageid_);
    std::swap(serveridentity_, other->serveridentity_);
    std::swap(socketfamily_, other->socketfamily_);
    std::swap(socketprotocol_, other->socketprotocol_);
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(inbytes_, other->inbytes_);
    std::swap(timesec_, other->timesec_);
    std::swap(timeusec_, other->timeusec_);
    std::swap(id_, other->id_);
    std::swap(question_, other->question_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDNSMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDNSMessage_descriptor_;
  metadata.reflection = PBDNSMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
