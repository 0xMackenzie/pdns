// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdns/dnsmessage.proto

#ifndef PROTOBUF_pdns_2fdnsmessage_2eproto__INCLUDED
#define PROTOBUF_pdns_2fdnsmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pdns_2fdnsmessage_2eproto();
void protobuf_AssignDesc_pdns_2fdnsmessage_2eproto();
void protobuf_ShutdownFile_pdns_2fdnsmessage_2eproto();

class PBDNSMessage;
class PBDNSMessage_DNSQuestion;
class PBDNSMessage_DNSResponse;
class PBDNSMessage_DNSResponse_DNSRR;

enum PBDNSMessage_Type {
  PBDNSMessage_Type_DNSQueryType = 1,
  PBDNSMessage_Type_DNSResponseType = 2
};
bool PBDNSMessage_Type_IsValid(int value);
const PBDNSMessage_Type PBDNSMessage_Type_Type_MIN = PBDNSMessage_Type_DNSQueryType;
const PBDNSMessage_Type PBDNSMessage_Type_Type_MAX = PBDNSMessage_Type_DNSResponseType;
const int PBDNSMessage_Type_Type_ARRAYSIZE = PBDNSMessage_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* PBDNSMessage_Type_descriptor();
inline const ::std::string& PBDNSMessage_Type_Name(PBDNSMessage_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    PBDNSMessage_Type_descriptor(), value);
}
inline bool PBDNSMessage_Type_Parse(
    const ::std::string& name, PBDNSMessage_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PBDNSMessage_Type>(
    PBDNSMessage_Type_descriptor(), name, value);
}
enum PBDNSMessage_SocketFamily {
  PBDNSMessage_SocketFamily_INET = 1,
  PBDNSMessage_SocketFamily_INET6 = 2
};
bool PBDNSMessage_SocketFamily_IsValid(int value);
const PBDNSMessage_SocketFamily PBDNSMessage_SocketFamily_SocketFamily_MIN = PBDNSMessage_SocketFamily_INET;
const PBDNSMessage_SocketFamily PBDNSMessage_SocketFamily_SocketFamily_MAX = PBDNSMessage_SocketFamily_INET6;
const int PBDNSMessage_SocketFamily_SocketFamily_ARRAYSIZE = PBDNSMessage_SocketFamily_SocketFamily_MAX + 1;

const ::google::protobuf::EnumDescriptor* PBDNSMessage_SocketFamily_descriptor();
inline const ::std::string& PBDNSMessage_SocketFamily_Name(PBDNSMessage_SocketFamily value) {
  return ::google::protobuf::internal::NameOfEnum(
    PBDNSMessage_SocketFamily_descriptor(), value);
}
inline bool PBDNSMessage_SocketFamily_Parse(
    const ::std::string& name, PBDNSMessage_SocketFamily* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PBDNSMessage_SocketFamily>(
    PBDNSMessage_SocketFamily_descriptor(), name, value);
}
enum PBDNSMessage_SocketProtocol {
  PBDNSMessage_SocketProtocol_UDP = 1,
  PBDNSMessage_SocketProtocol_TCP = 2
};
bool PBDNSMessage_SocketProtocol_IsValid(int value);
const PBDNSMessage_SocketProtocol PBDNSMessage_SocketProtocol_SocketProtocol_MIN = PBDNSMessage_SocketProtocol_UDP;
const PBDNSMessage_SocketProtocol PBDNSMessage_SocketProtocol_SocketProtocol_MAX = PBDNSMessage_SocketProtocol_TCP;
const int PBDNSMessage_SocketProtocol_SocketProtocol_ARRAYSIZE = PBDNSMessage_SocketProtocol_SocketProtocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* PBDNSMessage_SocketProtocol_descriptor();
inline const ::std::string& PBDNSMessage_SocketProtocol_Name(PBDNSMessage_SocketProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    PBDNSMessage_SocketProtocol_descriptor(), value);
}
inline bool PBDNSMessage_SocketProtocol_Parse(
    const ::std::string& name, PBDNSMessage_SocketProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PBDNSMessage_SocketProtocol>(
    PBDNSMessage_SocketProtocol_descriptor(), name, value);
}
// ===================================================================

class PBDNSMessage_DNSQuestion : public ::google::protobuf::Message {
 public:
  PBDNSMessage_DNSQuestion();
  virtual ~PBDNSMessage_DNSQuestion();

  PBDNSMessage_DNSQuestion(const PBDNSMessage_DNSQuestion& from);

  inline PBDNSMessage_DNSQuestion& operator=(const PBDNSMessage_DNSQuestion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBDNSMessage_DNSQuestion& default_instance();

  void Swap(PBDNSMessage_DNSQuestion* other);

  // implements Message ----------------------------------------------

  PBDNSMessage_DNSQuestion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBDNSMessage_DNSQuestion& from);
  void MergeFrom(const PBDNSMessage_DNSQuestion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string qName = 1;
  inline bool has_qname() const;
  inline void clear_qname();
  static const int kQNameFieldNumber = 1;
  inline const ::std::string& qname() const;
  inline void set_qname(const ::std::string& value);
  inline void set_qname(const char* value);
  inline void set_qname(const char* value, size_t size);
  inline ::std::string* mutable_qname();
  inline ::std::string* release_qname();
  inline void set_allocated_qname(::std::string* qname);

  // optional uint32 qType = 2;
  inline bool has_qtype() const;
  inline void clear_qtype();
  static const int kQTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 qtype() const;
  inline void set_qtype(::google::protobuf::uint32 value);

  // optional uint32 qClass = 3;
  inline bool has_qclass() const;
  inline void clear_qclass();
  static const int kQClassFieldNumber = 3;
  inline ::google::protobuf::uint32 qclass() const;
  inline void set_qclass(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PBDNSMessage.DNSQuestion)
 private:
  inline void set_has_qname();
  inline void clear_has_qname();
  inline void set_has_qtype();
  inline void clear_has_qtype();
  inline void set_has_qclass();
  inline void clear_has_qclass();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* qname_;
  ::google::protobuf::uint32 qtype_;
  ::google::protobuf::uint32 qclass_;
  friend void  protobuf_AddDesc_pdns_2fdnsmessage_2eproto();
  friend void protobuf_AssignDesc_pdns_2fdnsmessage_2eproto();
  friend void protobuf_ShutdownFile_pdns_2fdnsmessage_2eproto();

  void InitAsDefaultInstance();
  static PBDNSMessage_DNSQuestion* default_instance_;
};
// -------------------------------------------------------------------

class PBDNSMessage_DNSResponse_DNSRR : public ::google::protobuf::Message {
 public:
  PBDNSMessage_DNSResponse_DNSRR();
  virtual ~PBDNSMessage_DNSResponse_DNSRR();

  PBDNSMessage_DNSResponse_DNSRR(const PBDNSMessage_DNSResponse_DNSRR& from);

  inline PBDNSMessage_DNSResponse_DNSRR& operator=(const PBDNSMessage_DNSResponse_DNSRR& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBDNSMessage_DNSResponse_DNSRR& default_instance();

  void Swap(PBDNSMessage_DNSResponse_DNSRR* other);

  // implements Message ----------------------------------------------

  PBDNSMessage_DNSResponse_DNSRR* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBDNSMessage_DNSResponse_DNSRR& from);
  void MergeFrom(const PBDNSMessage_DNSResponse_DNSRR& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 class = 3;
  inline bool has_class_() const;
  inline void clear_class_();
  static const int kClassFieldNumber = 3;
  inline ::google::protobuf::uint32 class_() const;
  inline void set_class_(::google::protobuf::uint32 value);

  // optional uint32 ttl = 4;
  inline bool has_ttl() const;
  inline void clear_ttl();
  static const int kTtlFieldNumber = 4;
  inline ::google::protobuf::uint32 ttl() const;
  inline void set_ttl(::google::protobuf::uint32 value);

  // optional bytes rdata = 5;
  inline bool has_rdata() const;
  inline void clear_rdata();
  static const int kRdataFieldNumber = 5;
  inline const ::std::string& rdata() const;
  inline void set_rdata(const ::std::string& value);
  inline void set_rdata(const char* value);
  inline void set_rdata(const void* value, size_t size);
  inline ::std::string* mutable_rdata();
  inline ::std::string* release_rdata();
  inline void set_allocated_rdata(::std::string* rdata);

  // @@protoc_insertion_point(class_scope:PBDNSMessage.DNSResponse.DNSRR)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_class_();
  inline void clear_has_class_();
  inline void set_has_ttl();
  inline void clear_has_ttl();
  inline void set_has_rdata();
  inline void clear_has_rdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 class__;
  ::std::string* rdata_;
  ::google::protobuf::uint32 ttl_;
  friend void  protobuf_AddDesc_pdns_2fdnsmessage_2eproto();
  friend void protobuf_AssignDesc_pdns_2fdnsmessage_2eproto();
  friend void protobuf_ShutdownFile_pdns_2fdnsmessage_2eproto();

  void InitAsDefaultInstance();
  static PBDNSMessage_DNSResponse_DNSRR* default_instance_;
};
// -------------------------------------------------------------------

class PBDNSMessage_DNSResponse : public ::google::protobuf::Message {
 public:
  PBDNSMessage_DNSResponse();
  virtual ~PBDNSMessage_DNSResponse();

  PBDNSMessage_DNSResponse(const PBDNSMessage_DNSResponse& from);

  inline PBDNSMessage_DNSResponse& operator=(const PBDNSMessage_DNSResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBDNSMessage_DNSResponse& default_instance();

  void Swap(PBDNSMessage_DNSResponse* other);

  // implements Message ----------------------------------------------

  PBDNSMessage_DNSResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBDNSMessage_DNSResponse& from);
  void MergeFrom(const PBDNSMessage_DNSResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PBDNSMessage_DNSResponse_DNSRR DNSRR;

  // accessors -------------------------------------------------------

  // optional uint32 rcode = 1;
  inline bool has_rcode() const;
  inline void clear_rcode();
  static const int kRcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 rcode() const;
  inline void set_rcode(::google::protobuf::uint32 value);

  // repeated .PBDNSMessage.DNSResponse.DNSRR rrs = 2;
  inline int rrs_size() const;
  inline void clear_rrs();
  static const int kRrsFieldNumber = 2;
  inline const ::PBDNSMessage_DNSResponse_DNSRR& rrs(int index) const;
  inline ::PBDNSMessage_DNSResponse_DNSRR* mutable_rrs(int index);
  inline ::PBDNSMessage_DNSResponse_DNSRR* add_rrs();
  inline const ::google::protobuf::RepeatedPtrField< ::PBDNSMessage_DNSResponse_DNSRR >&
      rrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::PBDNSMessage_DNSResponse_DNSRR >*
      mutable_rrs();

  // @@protoc_insertion_point(class_scope:PBDNSMessage.DNSResponse)
 private:
  inline void set_has_rcode();
  inline void clear_has_rcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::PBDNSMessage_DNSResponse_DNSRR > rrs_;
  ::google::protobuf::uint32 rcode_;
  friend void  protobuf_AddDesc_pdns_2fdnsmessage_2eproto();
  friend void protobuf_AssignDesc_pdns_2fdnsmessage_2eproto();
  friend void protobuf_ShutdownFile_pdns_2fdnsmessage_2eproto();

  void InitAsDefaultInstance();
  static PBDNSMessage_DNSResponse* default_instance_;
};
// -------------------------------------------------------------------

class PBDNSMessage : public ::google::protobuf::Message {
 public:
  PBDNSMessage();
  virtual ~PBDNSMessage();

  PBDNSMessage(const PBDNSMessage& from);

  inline PBDNSMessage& operator=(const PBDNSMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBDNSMessage& default_instance();

  void Swap(PBDNSMessage* other);

  // implements Message ----------------------------------------------

  PBDNSMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBDNSMessage& from);
  void MergeFrom(const PBDNSMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PBDNSMessage_DNSQuestion DNSQuestion;
  typedef PBDNSMessage_DNSResponse DNSResponse;

  typedef PBDNSMessage_Type Type;
  static const Type DNSQueryType = PBDNSMessage_Type_DNSQueryType;
  static const Type DNSResponseType = PBDNSMessage_Type_DNSResponseType;
  static inline bool Type_IsValid(int value) {
    return PBDNSMessage_Type_IsValid(value);
  }
  static const Type Type_MIN =
    PBDNSMessage_Type_Type_MIN;
  static const Type Type_MAX =
    PBDNSMessage_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    PBDNSMessage_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return PBDNSMessage_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return PBDNSMessage_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return PBDNSMessage_Type_Parse(name, value);
  }

  typedef PBDNSMessage_SocketFamily SocketFamily;
  static const SocketFamily INET = PBDNSMessage_SocketFamily_INET;
  static const SocketFamily INET6 = PBDNSMessage_SocketFamily_INET6;
  static inline bool SocketFamily_IsValid(int value) {
    return PBDNSMessage_SocketFamily_IsValid(value);
  }
  static const SocketFamily SocketFamily_MIN =
    PBDNSMessage_SocketFamily_SocketFamily_MIN;
  static const SocketFamily SocketFamily_MAX =
    PBDNSMessage_SocketFamily_SocketFamily_MAX;
  static const int SocketFamily_ARRAYSIZE =
    PBDNSMessage_SocketFamily_SocketFamily_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SocketFamily_descriptor() {
    return PBDNSMessage_SocketFamily_descriptor();
  }
  static inline const ::std::string& SocketFamily_Name(SocketFamily value) {
    return PBDNSMessage_SocketFamily_Name(value);
  }
  static inline bool SocketFamily_Parse(const ::std::string& name,
      SocketFamily* value) {
    return PBDNSMessage_SocketFamily_Parse(name, value);
  }

  typedef PBDNSMessage_SocketProtocol SocketProtocol;
  static const SocketProtocol UDP = PBDNSMessage_SocketProtocol_UDP;
  static const SocketProtocol TCP = PBDNSMessage_SocketProtocol_TCP;
  static inline bool SocketProtocol_IsValid(int value) {
    return PBDNSMessage_SocketProtocol_IsValid(value);
  }
  static const SocketProtocol SocketProtocol_MIN =
    PBDNSMessage_SocketProtocol_SocketProtocol_MIN;
  static const SocketProtocol SocketProtocol_MAX =
    PBDNSMessage_SocketProtocol_SocketProtocol_MAX;
  static const int SocketProtocol_ARRAYSIZE =
    PBDNSMessage_SocketProtocol_SocketProtocol_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SocketProtocol_descriptor() {
    return PBDNSMessage_SocketProtocol_descriptor();
  }
  static inline const ::std::string& SocketProtocol_Name(SocketProtocol value) {
    return PBDNSMessage_SocketProtocol_Name(value);
  }
  static inline bool SocketProtocol_Parse(const ::std::string& name,
      SocketProtocol* value) {
    return PBDNSMessage_SocketProtocol_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PBDNSMessage.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PBDNSMessage_Type type() const;
  inline void set_type(::PBDNSMessage_Type value);

  // optional bytes messageId = 2;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIdFieldNumber = 2;
  inline const ::std::string& messageid() const;
  inline void set_messageid(const ::std::string& value);
  inline void set_messageid(const char* value);
  inline void set_messageid(const void* value, size_t size);
  inline ::std::string* mutable_messageid();
  inline ::std::string* release_messageid();
  inline void set_allocated_messageid(::std::string* messageid);

  // optional bytes serverIdentity = 3;
  inline bool has_serveridentity() const;
  inline void clear_serveridentity();
  static const int kServerIdentityFieldNumber = 3;
  inline const ::std::string& serveridentity() const;
  inline void set_serveridentity(const ::std::string& value);
  inline void set_serveridentity(const char* value);
  inline void set_serveridentity(const void* value, size_t size);
  inline ::std::string* mutable_serveridentity();
  inline ::std::string* release_serveridentity();
  inline void set_allocated_serveridentity(::std::string* serveridentity);

  // optional .PBDNSMessage.SocketFamily socketFamily = 4;
  inline bool has_socketfamily() const;
  inline void clear_socketfamily();
  static const int kSocketFamilyFieldNumber = 4;
  inline ::PBDNSMessage_SocketFamily socketfamily() const;
  inline void set_socketfamily(::PBDNSMessage_SocketFamily value);

  // optional .PBDNSMessage.SocketProtocol socketProtocol = 5;
  inline bool has_socketprotocol() const;
  inline void clear_socketprotocol();
  static const int kSocketProtocolFieldNumber = 5;
  inline ::PBDNSMessage_SocketProtocol socketprotocol() const;
  inline void set_socketprotocol(::PBDNSMessage_SocketProtocol value);

  // optional bytes from = 6;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 6;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const void* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  inline void set_allocated_from(::std::string* from);

  // optional bytes to = 7;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 7;
  inline const ::std::string& to() const;
  inline void set_to(const ::std::string& value);
  inline void set_to(const char* value);
  inline void set_to(const void* value, size_t size);
  inline ::std::string* mutable_to();
  inline ::std::string* release_to();
  inline void set_allocated_to(::std::string* to);

  // optional uint64 inBytes = 8;
  inline bool has_inbytes() const;
  inline void clear_inbytes();
  static const int kInBytesFieldNumber = 8;
  inline ::google::protobuf::uint64 inbytes() const;
  inline void set_inbytes(::google::protobuf::uint64 value);

  // optional uint32 timeSec = 9;
  inline bool has_timesec() const;
  inline void clear_timesec();
  static const int kTimeSecFieldNumber = 9;
  inline ::google::protobuf::uint32 timesec() const;
  inline void set_timesec(::google::protobuf::uint32 value);

  // optional uint32 timeUsec = 10;
  inline bool has_timeusec() const;
  inline void clear_timeusec();
  static const int kTimeUsecFieldNumber = 10;
  inline ::google::protobuf::uint32 timeusec() const;
  inline void set_timeusec(::google::protobuf::uint32 value);

  // optional uint32 id = 11;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 11;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .PBDNSMessage.DNSQuestion question = 12;
  inline bool has_question() const;
  inline void clear_question();
  static const int kQuestionFieldNumber = 12;
  inline const ::PBDNSMessage_DNSQuestion& question() const;
  inline ::PBDNSMessage_DNSQuestion* mutable_question();
  inline ::PBDNSMessage_DNSQuestion* release_question();
  inline void set_allocated_question(::PBDNSMessage_DNSQuestion* question);

  // optional .PBDNSMessage.DNSResponse response = 13;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 13;
  inline const ::PBDNSMessage_DNSResponse& response() const;
  inline ::PBDNSMessage_DNSResponse* mutable_response();
  inline ::PBDNSMessage_DNSResponse* release_response();
  inline void set_allocated_response(::PBDNSMessage_DNSResponse* response);

  // @@protoc_insertion_point(class_scope:PBDNSMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_serveridentity();
  inline void clear_has_serveridentity();
  inline void set_has_socketfamily();
  inline void clear_has_socketfamily();
  inline void set_has_socketprotocol();
  inline void clear_has_socketprotocol();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_to();
  inline void clear_has_to();
  inline void set_has_inbytes();
  inline void clear_has_inbytes();
  inline void set_has_timesec();
  inline void clear_has_timesec();
  inline void set_has_timeusec();
  inline void clear_has_timeusec();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_question();
  inline void clear_has_question();
  inline void set_has_response();
  inline void clear_has_response();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* messageid_;
  int type_;
  int socketfamily_;
  ::std::string* serveridentity_;
  ::std::string* from_;
  ::std::string* to_;
  int socketprotocol_;
  ::google::protobuf::uint32 timesec_;
  ::google::protobuf::uint64 inbytes_;
  ::google::protobuf::uint32 timeusec_;
  ::google::protobuf::uint32 id_;
  ::PBDNSMessage_DNSQuestion* question_;
  ::PBDNSMessage_DNSResponse* response_;
  friend void  protobuf_AddDesc_pdns_2fdnsmessage_2eproto();
  friend void protobuf_AssignDesc_pdns_2fdnsmessage_2eproto();
  friend void protobuf_ShutdownFile_pdns_2fdnsmessage_2eproto();

  void InitAsDefaultInstance();
  static PBDNSMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// PBDNSMessage_DNSQuestion

// optional string qName = 1;
inline bool PBDNSMessage_DNSQuestion::has_qname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBDNSMessage_DNSQuestion::set_has_qname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBDNSMessage_DNSQuestion::clear_has_qname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBDNSMessage_DNSQuestion::clear_qname() {
  if (qname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qname_->clear();
  }
  clear_has_qname();
}
inline const ::std::string& PBDNSMessage_DNSQuestion::qname() const {
  // @@protoc_insertion_point(field_get:PBDNSMessage.DNSQuestion.qName)
  return *qname_;
}
inline void PBDNSMessage_DNSQuestion::set_qname(const ::std::string& value) {
  set_has_qname();
  if (qname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qname_ = new ::std::string;
  }
  qname_->assign(value);
  // @@protoc_insertion_point(field_set:PBDNSMessage.DNSQuestion.qName)
}
inline void PBDNSMessage_DNSQuestion::set_qname(const char* value) {
  set_has_qname();
  if (qname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qname_ = new ::std::string;
  }
  qname_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBDNSMessage.DNSQuestion.qName)
}
inline void PBDNSMessage_DNSQuestion::set_qname(const char* value, size_t size) {
  set_has_qname();
  if (qname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qname_ = new ::std::string;
  }
  qname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBDNSMessage.DNSQuestion.qName)
}
inline ::std::string* PBDNSMessage_DNSQuestion::mutable_qname() {
  set_has_qname();
  if (qname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBDNSMessage.DNSQuestion.qName)
  return qname_;
}
inline ::std::string* PBDNSMessage_DNSQuestion::release_qname() {
  clear_has_qname();
  if (qname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = qname_;
    qname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBDNSMessage_DNSQuestion::set_allocated_qname(::std::string* qname) {
  if (qname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qname_;
  }
  if (qname) {
    set_has_qname();
    qname_ = qname;
  } else {
    clear_has_qname();
    qname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBDNSMessage.DNSQuestion.qName)
}

// optional uint32 qType = 2;
inline bool PBDNSMessage_DNSQuestion::has_qtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBDNSMessage_DNSQuestion::set_has_qtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBDNSMessage_DNSQuestion::clear_has_qtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBDNSMessage_DNSQuestion::clear_qtype() {
  qtype_ = 0u;
  clear_has_qtype();
}
inline ::google::protobuf::uint32 PBDNSMessage_DNSQuestion::qtype() const {
  // @@protoc_insertion_point(field_get:PBDNSMessage.DNSQuestion.qType)
  return qtype_;
}
inline void PBDNSMessage_DNSQuestion::set_qtype(::google::protobuf::uint32 value) {
  set_has_qtype();
  qtype_ = value;
  // @@protoc_insertion_point(field_set:PBDNSMessage.DNSQuestion.qType)
}

// optional uint32 qClass = 3;
inline bool PBDNSMessage_DNSQuestion::has_qclass() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBDNSMessage_DNSQuestion::set_has_qclass() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBDNSMessage_DNSQuestion::clear_has_qclass() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBDNSMessage_DNSQuestion::clear_qclass() {
  qclass_ = 0u;
  clear_has_qclass();
}
inline ::google::protobuf::uint32 PBDNSMessage_DNSQuestion::qclass() const {
  // @@protoc_insertion_point(field_get:PBDNSMessage.DNSQuestion.qClass)
  return qclass_;
}
inline void PBDNSMessage_DNSQuestion::set_qclass(::google::protobuf::uint32 value) {
  set_has_qclass();
  qclass_ = value;
  // @@protoc_insertion_point(field_set:PBDNSMessage.DNSQuestion.qClass)
}

// -------------------------------------------------------------------

// PBDNSMessage_DNSResponse_DNSRR

// optional string name = 1;
inline bool PBDNSMessage_DNSResponse_DNSRR::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBDNSMessage_DNSResponse_DNSRR::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBDNSMessage_DNSResponse_DNSRR::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBDNSMessage_DNSResponse_DNSRR::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBDNSMessage_DNSResponse_DNSRR::name() const {
  // @@protoc_insertion_point(field_get:PBDNSMessage.DNSResponse.DNSRR.name)
  return *name_;
}
inline void PBDNSMessage_DNSResponse_DNSRR::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:PBDNSMessage.DNSResponse.DNSRR.name)
}
inline void PBDNSMessage_DNSResponse_DNSRR::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBDNSMessage.DNSResponse.DNSRR.name)
}
inline void PBDNSMessage_DNSResponse_DNSRR::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBDNSMessage.DNSResponse.DNSRR.name)
}
inline ::std::string* PBDNSMessage_DNSResponse_DNSRR::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBDNSMessage.DNSResponse.DNSRR.name)
  return name_;
}
inline ::std::string* PBDNSMessage_DNSResponse_DNSRR::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBDNSMessage_DNSResponse_DNSRR::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBDNSMessage.DNSResponse.DNSRR.name)
}

// optional uint32 type = 2;
inline bool PBDNSMessage_DNSResponse_DNSRR::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBDNSMessage_DNSResponse_DNSRR::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBDNSMessage_DNSResponse_DNSRR::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBDNSMessage_DNSResponse_DNSRR::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 PBDNSMessage_DNSResponse_DNSRR::type() const {
  // @@protoc_insertion_point(field_get:PBDNSMessage.DNSResponse.DNSRR.type)
  return type_;
}
inline void PBDNSMessage_DNSResponse_DNSRR::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:PBDNSMessage.DNSResponse.DNSRR.type)
}

// optional uint32 class = 3;
inline bool PBDNSMessage_DNSResponse_DNSRR::has_class_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBDNSMessage_DNSResponse_DNSRR::set_has_class_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBDNSMessage_DNSResponse_DNSRR::clear_has_class_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBDNSMessage_DNSResponse_DNSRR::clear_class_() {
  class__ = 0u;
  clear_has_class_();
}
inline ::google::protobuf::uint32 PBDNSMessage_DNSResponse_DNSRR::class_() const {
  // @@protoc_insertion_point(field_get:PBDNSMessage.DNSResponse.DNSRR.class)
  return class__;
}
inline void PBDNSMessage_DNSResponse_DNSRR::set_class_(::google::protobuf::uint32 value) {
  set_has_class_();
  class__ = value;
  // @@protoc_insertion_point(field_set:PBDNSMessage.DNSResponse.DNSRR.class)
}

// optional uint32 ttl = 4;
inline bool PBDNSMessage_DNSResponse_DNSRR::has_ttl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBDNSMessage_DNSResponse_DNSRR::set_has_ttl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBDNSMessage_DNSResponse_DNSRR::clear_has_ttl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBDNSMessage_DNSResponse_DNSRR::clear_ttl() {
  ttl_ = 0u;
  clear_has_ttl();
}
inline ::google::protobuf::uint32 PBDNSMessage_DNSResponse_DNSRR::ttl() const {
  // @@protoc_insertion_point(field_get:PBDNSMessage.DNSResponse.DNSRR.ttl)
  return ttl_;
}
inline void PBDNSMessage_DNSResponse_DNSRR::set_ttl(::google::protobuf::uint32 value) {
  set_has_ttl();
  ttl_ = value;
  // @@protoc_insertion_point(field_set:PBDNSMessage.DNSResponse.DNSRR.ttl)
}

// optional bytes rdata = 5;
inline bool PBDNSMessage_DNSResponse_DNSRR::has_rdata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBDNSMessage_DNSResponse_DNSRR::set_has_rdata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBDNSMessage_DNSResponse_DNSRR::clear_has_rdata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBDNSMessage_DNSResponse_DNSRR::clear_rdata() {
  if (rdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rdata_->clear();
  }
  clear_has_rdata();
}
inline const ::std::string& PBDNSMessage_DNSResponse_DNSRR::rdata() const {
  // @@protoc_insertion_point(field_get:PBDNSMessage.DNSResponse.DNSRR.rdata)
  return *rdata_;
}
inline void PBDNSMessage_DNSResponse_DNSRR::set_rdata(const ::std::string& value) {
  set_has_rdata();
  if (rdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rdata_ = new ::std::string;
  }
  rdata_->assign(value);
  // @@protoc_insertion_point(field_set:PBDNSMessage.DNSResponse.DNSRR.rdata)
}
inline void PBDNSMessage_DNSResponse_DNSRR::set_rdata(const char* value) {
  set_has_rdata();
  if (rdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rdata_ = new ::std::string;
  }
  rdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBDNSMessage.DNSResponse.DNSRR.rdata)
}
inline void PBDNSMessage_DNSResponse_DNSRR::set_rdata(const void* value, size_t size) {
  set_has_rdata();
  if (rdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rdata_ = new ::std::string;
  }
  rdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBDNSMessage.DNSResponse.DNSRR.rdata)
}
inline ::std::string* PBDNSMessage_DNSResponse_DNSRR::mutable_rdata() {
  set_has_rdata();
  if (rdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBDNSMessage.DNSResponse.DNSRR.rdata)
  return rdata_;
}
inline ::std::string* PBDNSMessage_DNSResponse_DNSRR::release_rdata() {
  clear_has_rdata();
  if (rdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rdata_;
    rdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBDNSMessage_DNSResponse_DNSRR::set_allocated_rdata(::std::string* rdata) {
  if (rdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rdata_;
  }
  if (rdata) {
    set_has_rdata();
    rdata_ = rdata;
  } else {
    clear_has_rdata();
    rdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBDNSMessage.DNSResponse.DNSRR.rdata)
}

// -------------------------------------------------------------------

// PBDNSMessage_DNSResponse

// optional uint32 rcode = 1;
inline bool PBDNSMessage_DNSResponse::has_rcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBDNSMessage_DNSResponse::set_has_rcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBDNSMessage_DNSResponse::clear_has_rcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBDNSMessage_DNSResponse::clear_rcode() {
  rcode_ = 0u;
  clear_has_rcode();
}
inline ::google::protobuf::uint32 PBDNSMessage_DNSResponse::rcode() const {
  // @@protoc_insertion_point(field_get:PBDNSMessage.DNSResponse.rcode)
  return rcode_;
}
inline void PBDNSMessage_DNSResponse::set_rcode(::google::protobuf::uint32 value) {
  set_has_rcode();
  rcode_ = value;
  // @@protoc_insertion_point(field_set:PBDNSMessage.DNSResponse.rcode)
}

// repeated .PBDNSMessage.DNSResponse.DNSRR rrs = 2;
inline int PBDNSMessage_DNSResponse::rrs_size() const {
  return rrs_.size();
}
inline void PBDNSMessage_DNSResponse::clear_rrs() {
  rrs_.Clear();
}
inline const ::PBDNSMessage_DNSResponse_DNSRR& PBDNSMessage_DNSResponse::rrs(int index) const {
  // @@protoc_insertion_point(field_get:PBDNSMessage.DNSResponse.rrs)
  return rrs_.Get(index);
}
inline ::PBDNSMessage_DNSResponse_DNSRR* PBDNSMessage_DNSResponse::mutable_rrs(int index) {
  // @@protoc_insertion_point(field_mutable:PBDNSMessage.DNSResponse.rrs)
  return rrs_.Mutable(index);
}
inline ::PBDNSMessage_DNSResponse_DNSRR* PBDNSMessage_DNSResponse::add_rrs() {
  // @@protoc_insertion_point(field_add:PBDNSMessage.DNSResponse.rrs)
  return rrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PBDNSMessage_DNSResponse_DNSRR >&
PBDNSMessage_DNSResponse::rrs() const {
  // @@protoc_insertion_point(field_list:PBDNSMessage.DNSResponse.rrs)
  return rrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::PBDNSMessage_DNSResponse_DNSRR >*
PBDNSMessage_DNSResponse::mutable_rrs() {
  // @@protoc_insertion_point(field_mutable_list:PBDNSMessage.DNSResponse.rrs)
  return &rrs_;
}

// -------------------------------------------------------------------

// PBDNSMessage

// required .PBDNSMessage.Type type = 1;
inline bool PBDNSMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBDNSMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBDNSMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBDNSMessage::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::PBDNSMessage_Type PBDNSMessage::type() const {
  // @@protoc_insertion_point(field_get:PBDNSMessage.type)
  return static_cast< ::PBDNSMessage_Type >(type_);
}
inline void PBDNSMessage::set_type(::PBDNSMessage_Type value) {
  assert(::PBDNSMessage_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:PBDNSMessage.type)
}

// optional bytes messageId = 2;
inline bool PBDNSMessage::has_messageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBDNSMessage::set_has_messageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBDNSMessage::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBDNSMessage::clear_messageid() {
  if (messageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_->clear();
  }
  clear_has_messageid();
}
inline const ::std::string& PBDNSMessage::messageid() const {
  // @@protoc_insertion_point(field_get:PBDNSMessage.messageId)
  return *messageid_;
}
inline void PBDNSMessage::set_messageid(const ::std::string& value) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(value);
  // @@protoc_insertion_point(field_set:PBDNSMessage.messageId)
}
inline void PBDNSMessage::set_messageid(const char* value) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBDNSMessage.messageId)
}
inline void PBDNSMessage::set_messageid(const void* value, size_t size) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBDNSMessage.messageId)
}
inline ::std::string* PBDNSMessage::mutable_messageid() {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    messageid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBDNSMessage.messageId)
  return messageid_;
}
inline ::std::string* PBDNSMessage::release_messageid() {
  clear_has_messageid();
  if (messageid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = messageid_;
    messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBDNSMessage::set_allocated_messageid(::std::string* messageid) {
  if (messageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messageid_;
  }
  if (messageid) {
    set_has_messageid();
    messageid_ = messageid;
  } else {
    clear_has_messageid();
    messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBDNSMessage.messageId)
}

// optional bytes serverIdentity = 3;
inline bool PBDNSMessage::has_serveridentity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBDNSMessage::set_has_serveridentity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBDNSMessage::clear_has_serveridentity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBDNSMessage::clear_serveridentity() {
  if (serveridentity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serveridentity_->clear();
  }
  clear_has_serveridentity();
}
inline const ::std::string& PBDNSMessage::serveridentity() const {
  // @@protoc_insertion_point(field_get:PBDNSMessage.serverIdentity)
  return *serveridentity_;
}
inline void PBDNSMessage::set_serveridentity(const ::std::string& value) {
  set_has_serveridentity();
  if (serveridentity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serveridentity_ = new ::std::string;
  }
  serveridentity_->assign(value);
  // @@protoc_insertion_point(field_set:PBDNSMessage.serverIdentity)
}
inline void PBDNSMessage::set_serveridentity(const char* value) {
  set_has_serveridentity();
  if (serveridentity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serveridentity_ = new ::std::string;
  }
  serveridentity_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBDNSMessage.serverIdentity)
}
inline void PBDNSMessage::set_serveridentity(const void* value, size_t size) {
  set_has_serveridentity();
  if (serveridentity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serveridentity_ = new ::std::string;
  }
  serveridentity_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBDNSMessage.serverIdentity)
}
inline ::std::string* PBDNSMessage::mutable_serveridentity() {
  set_has_serveridentity();
  if (serveridentity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serveridentity_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBDNSMessage.serverIdentity)
  return serveridentity_;
}
inline ::std::string* PBDNSMessage::release_serveridentity() {
  clear_has_serveridentity();
  if (serveridentity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serveridentity_;
    serveridentity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBDNSMessage::set_allocated_serveridentity(::std::string* serveridentity) {
  if (serveridentity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serveridentity_;
  }
  if (serveridentity) {
    set_has_serveridentity();
    serveridentity_ = serveridentity;
  } else {
    clear_has_serveridentity();
    serveridentity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBDNSMessage.serverIdentity)
}

// optional .PBDNSMessage.SocketFamily socketFamily = 4;
inline bool PBDNSMessage::has_socketfamily() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBDNSMessage::set_has_socketfamily() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBDNSMessage::clear_has_socketfamily() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBDNSMessage::clear_socketfamily() {
  socketfamily_ = 1;
  clear_has_socketfamily();
}
inline ::PBDNSMessage_SocketFamily PBDNSMessage::socketfamily() const {
  // @@protoc_insertion_point(field_get:PBDNSMessage.socketFamily)
  return static_cast< ::PBDNSMessage_SocketFamily >(socketfamily_);
}
inline void PBDNSMessage::set_socketfamily(::PBDNSMessage_SocketFamily value) {
  assert(::PBDNSMessage_SocketFamily_IsValid(value));
  set_has_socketfamily();
  socketfamily_ = value;
  // @@protoc_insertion_point(field_set:PBDNSMessage.socketFamily)
}

// optional .PBDNSMessage.SocketProtocol socketProtocol = 5;
inline bool PBDNSMessage::has_socketprotocol() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBDNSMessage::set_has_socketprotocol() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBDNSMessage::clear_has_socketprotocol() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBDNSMessage::clear_socketprotocol() {
  socketprotocol_ = 1;
  clear_has_socketprotocol();
}
inline ::PBDNSMessage_SocketProtocol PBDNSMessage::socketprotocol() const {
  // @@protoc_insertion_point(field_get:PBDNSMessage.socketProtocol)
  return static_cast< ::PBDNSMessage_SocketProtocol >(socketprotocol_);
}
inline void PBDNSMessage::set_socketprotocol(::PBDNSMessage_SocketProtocol value) {
  assert(::PBDNSMessage_SocketProtocol_IsValid(value));
  set_has_socketprotocol();
  socketprotocol_ = value;
  // @@protoc_insertion_point(field_set:PBDNSMessage.socketProtocol)
}

// optional bytes from = 6;
inline bool PBDNSMessage::has_from() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBDNSMessage::set_has_from() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBDNSMessage::clear_has_from() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBDNSMessage::clear_from() {
  if (from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& PBDNSMessage::from() const {
  // @@protoc_insertion_point(field_get:PBDNSMessage.from)
  return *from_;
}
inline void PBDNSMessage::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_ = new ::std::string;
  }
  from_->assign(value);
  // @@protoc_insertion_point(field_set:PBDNSMessage.from)
}
inline void PBDNSMessage::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_ = new ::std::string;
  }
  from_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBDNSMessage.from)
}
inline void PBDNSMessage::set_from(const void* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBDNSMessage.from)
}
inline ::std::string* PBDNSMessage::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBDNSMessage.from)
  return from_;
}
inline ::std::string* PBDNSMessage::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBDNSMessage::set_allocated_from(::std::string* from) {
  if (from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_;
  }
  if (from) {
    set_has_from();
    from_ = from;
  } else {
    clear_has_from();
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBDNSMessage.from)
}

// optional bytes to = 7;
inline bool PBDNSMessage::has_to() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBDNSMessage::set_has_to() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBDNSMessage::clear_has_to() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBDNSMessage::clear_to() {
  if (to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_->clear();
  }
  clear_has_to();
}
inline const ::std::string& PBDNSMessage::to() const {
  // @@protoc_insertion_point(field_get:PBDNSMessage.to)
  return *to_;
}
inline void PBDNSMessage::set_to(const ::std::string& value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_ = new ::std::string;
  }
  to_->assign(value);
  // @@protoc_insertion_point(field_set:PBDNSMessage.to)
}
inline void PBDNSMessage::set_to(const char* value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_ = new ::std::string;
  }
  to_->assign(value);
  // @@protoc_insertion_point(field_set_char:PBDNSMessage.to)
}
inline void PBDNSMessage::set_to(const void* value, size_t size) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_ = new ::std::string;
  }
  to_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PBDNSMessage.to)
}
inline ::std::string* PBDNSMessage::mutable_to() {
  set_has_to();
  if (to_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    to_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PBDNSMessage.to)
  return to_;
}
inline ::std::string* PBDNSMessage::release_to() {
  clear_has_to();
  if (to_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = to_;
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PBDNSMessage::set_allocated_to(::std::string* to) {
  if (to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_;
  }
  if (to) {
    set_has_to();
    to_ = to;
  } else {
    clear_has_to();
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PBDNSMessage.to)
}

// optional uint64 inBytes = 8;
inline bool PBDNSMessage::has_inbytes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBDNSMessage::set_has_inbytes() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBDNSMessage::clear_has_inbytes() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBDNSMessage::clear_inbytes() {
  inbytes_ = GOOGLE_ULONGLONG(0);
  clear_has_inbytes();
}
inline ::google::protobuf::uint64 PBDNSMessage::inbytes() const {
  // @@protoc_insertion_point(field_get:PBDNSMessage.inBytes)
  return inbytes_;
}
inline void PBDNSMessage::set_inbytes(::google::protobuf::uint64 value) {
  set_has_inbytes();
  inbytes_ = value;
  // @@protoc_insertion_point(field_set:PBDNSMessage.inBytes)
}

// optional uint32 timeSec = 9;
inline bool PBDNSMessage::has_timesec() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PBDNSMessage::set_has_timesec() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PBDNSMessage::clear_has_timesec() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PBDNSMessage::clear_timesec() {
  timesec_ = 0u;
  clear_has_timesec();
}
inline ::google::protobuf::uint32 PBDNSMessage::timesec() const {
  // @@protoc_insertion_point(field_get:PBDNSMessage.timeSec)
  return timesec_;
}
inline void PBDNSMessage::set_timesec(::google::protobuf::uint32 value) {
  set_has_timesec();
  timesec_ = value;
  // @@protoc_insertion_point(field_set:PBDNSMessage.timeSec)
}

// optional uint32 timeUsec = 10;
inline bool PBDNSMessage::has_timeusec() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PBDNSMessage::set_has_timeusec() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PBDNSMessage::clear_has_timeusec() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PBDNSMessage::clear_timeusec() {
  timeusec_ = 0u;
  clear_has_timeusec();
}
inline ::google::protobuf::uint32 PBDNSMessage::timeusec() const {
  // @@protoc_insertion_point(field_get:PBDNSMessage.timeUsec)
  return timeusec_;
}
inline void PBDNSMessage::set_timeusec(::google::protobuf::uint32 value) {
  set_has_timeusec();
  timeusec_ = value;
  // @@protoc_insertion_point(field_set:PBDNSMessage.timeUsec)
}

// optional uint32 id = 11;
inline bool PBDNSMessage::has_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PBDNSMessage::set_has_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PBDNSMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PBDNSMessage::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 PBDNSMessage::id() const {
  // @@protoc_insertion_point(field_get:PBDNSMessage.id)
  return id_;
}
inline void PBDNSMessage::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:PBDNSMessage.id)
}

// optional .PBDNSMessage.DNSQuestion question = 12;
inline bool PBDNSMessage::has_question() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PBDNSMessage::set_has_question() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PBDNSMessage::clear_has_question() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PBDNSMessage::clear_question() {
  if (question_ != NULL) question_->::PBDNSMessage_DNSQuestion::Clear();
  clear_has_question();
}
inline const ::PBDNSMessage_DNSQuestion& PBDNSMessage::question() const {
  // @@protoc_insertion_point(field_get:PBDNSMessage.question)
  return question_ != NULL ? *question_ : *default_instance_->question_;
}
inline ::PBDNSMessage_DNSQuestion* PBDNSMessage::mutable_question() {
  set_has_question();
  if (question_ == NULL) question_ = new ::PBDNSMessage_DNSQuestion;
  // @@protoc_insertion_point(field_mutable:PBDNSMessage.question)
  return question_;
}
inline ::PBDNSMessage_DNSQuestion* PBDNSMessage::release_question() {
  clear_has_question();
  ::PBDNSMessage_DNSQuestion* temp = question_;
  question_ = NULL;
  return temp;
}
inline void PBDNSMessage::set_allocated_question(::PBDNSMessage_DNSQuestion* question) {
  delete question_;
  question_ = question;
  if (question) {
    set_has_question();
  } else {
    clear_has_question();
  }
  // @@protoc_insertion_point(field_set_allocated:PBDNSMessage.question)
}

// optional .PBDNSMessage.DNSResponse response = 13;
inline bool PBDNSMessage::has_response() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PBDNSMessage::set_has_response() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PBDNSMessage::clear_has_response() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PBDNSMessage::clear_response() {
  if (response_ != NULL) response_->::PBDNSMessage_DNSResponse::Clear();
  clear_has_response();
}
inline const ::PBDNSMessage_DNSResponse& PBDNSMessage::response() const {
  // @@protoc_insertion_point(field_get:PBDNSMessage.response)
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
inline ::PBDNSMessage_DNSResponse* PBDNSMessage::mutable_response() {
  set_has_response();
  if (response_ == NULL) response_ = new ::PBDNSMessage_DNSResponse;
  // @@protoc_insertion_point(field_mutable:PBDNSMessage.response)
  return response_;
}
inline ::PBDNSMessage_DNSResponse* PBDNSMessage::release_response() {
  clear_has_response();
  ::PBDNSMessage_DNSResponse* temp = response_;
  response_ = NULL;
  return temp;
}
inline void PBDNSMessage::set_allocated_response(::PBDNSMessage_DNSResponse* response) {
  delete response_;
  response_ = response;
  if (response) {
    set_has_response();
  } else {
    clear_has_response();
  }
  // @@protoc_insertion_point(field_set_allocated:PBDNSMessage.response)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::PBDNSMessage_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PBDNSMessage_Type>() {
  return ::PBDNSMessage_Type_descriptor();
}
template <> struct is_proto_enum< ::PBDNSMessage_SocketFamily> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PBDNSMessage_SocketFamily>() {
  return ::PBDNSMessage_SocketFamily_descriptor();
}
template <> struct is_proto_enum< ::PBDNSMessage_SocketProtocol> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PBDNSMessage_SocketProtocol>() {
  return ::PBDNSMessage_SocketProtocol_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pdns_2fdnsmessage_2eproto__INCLUDED
